Students at your hometown high school have decided to organize their social network using databases. So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema:

Highschooler ( ID, name, grade )
English: There is a high school student with unique ID and a given first name in a certain grade.

Friend ( ID1, ID2 )
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123).

Likes ( ID1, ID2 )
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present.

Q1
1/1 point (graded)
Find the names of all students who are friends with someone named Gabriel.

select N2
from Friend 
inner join
(select ID as ID1, name as N1
from Highschooler) using(ID1)
inner join 
(select ID as ID2, name as N2 
from Highschooler) using(ID2)
where N1 = 'Gabriel'

Q2
1/1 point (graded)
For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like.

select name,grade,N2, G2
from Highschooler H1
inner join
(select ID1 as ID, ID2
from Likes) 
using(ID)
inner join
(select ID as ID2, H2.name as N2, H2.grade as G2
from Highschooler H2)
using(ID2)
where (grade-G2) >= 2

Q3
1/1 point (graded)
For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order.

select N1, G1, N2, G2

from(
select L1.ID1 as IDA, L1.ID2 as IDB
from  Likes L1, Likes L2
where L1.ID1 = L2.ID2 and L2.ID1 = L1.ID2)

inner join (select ID as IDA, name as N1, grade as G1 from Highschooler) using(IDA)
inner join (select ID as IDB, name as N2, grade as G2 from Highschooler) using(IDB)

where N2>N1

order by N1

Q4
1/1 point (graded)
Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade.

select name, grade
from Highschooler
where ID not in (select ID1 as like_ID1 from Likes) and ID not in (select ID2 as like_ID2 from Likes)

Q5
1/1 point (graded)
For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.

select N1, G1, N2, G2
from Likes L1 
inner join (select name as N1, ID as ID1, grade as G1 from Highschooler H1) using(ID1)
inner join (select name as N2, ID as ID2, grade as G2 from Highschooler H2) using(ID2)
where L1.ID2 not in (select L2.ID1 from Likes L2)

Q6
1/1 point (graded)
Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.

select distinct N1, G1

from 
(select N1, G1, ID1
from Friend
inner join (select ID as ID1, grade as G1, name as N1 from Highschooler) using(ID1)
inner join (select ID as ID2, grade as G2, name as N2 from Highschooler) using(ID2))

where ID1 not in

(select ID1
from Friend
inner join (select ID as ID1, grade as G1, name as N1 from Highschooler) using(ID1)
inner join (select ID as ID2, grade as G2, name as N2 from Highschooler) using(ID2)
where G1 <> G2)

order by G1, N1

Q7
1/1 point (graded)
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C.

select N1, G1, N2, G2, N3, G3
from
(select L1.ID1 as Y1, L1.ID2 as Y2, F1.ID2 as Y3
from Likes L1
inner join (select ID as ID1, name as N1, grade as G1 from Highschooler H1) using(ID1)
inner join (select ID as ID2, name as N2, grade as G2 from Highschooler H2) using(ID2)
inner join Friend F1 using(ID1)
inner join Friend F2 using(ID2)
where F1.ID2 = F2.ID1

except

select L1.ID1 as X1, L1.ID2 as X2, F1.ID2 
from Likes L1
inner join (select ID as ID1, name as N1, grade as G1 from Highschooler H1) using(ID1)
inner join (select ID as ID2, name as N2, grade as G2 from Highschooler H2) using(ID2)
inner join Friend F1 using(ID1)
inner join Friend F2 using(ID2)
inner join Friend F3
where F1.ID2 = F2.ID1 and L1.ID1 = F3.ID1 and L1.ID2 = F3.ID2) 

inner join (select ID as Y1, name as N1, grade as G1 from Highschooler H1) using(Y1)
inner join (select ID as Y2, name as N2, grade as G2 from Highschooler H2) using(Y2)
inner join (select ID as Y3, name as N3, grade as G3 from Highschooler H3) using(Y3)


Q8
1/1 point (graded)
Find the difference between the number of students in the school and the number of different first names.

select count(ID) - count(distinct name)
from Highschooler

Q9
1/1 point (graded)
Find the name and grade of all students who are liked by more than one other student.

select N2,G2
from Likes L1
inner join (select ID as ID1, name as N1, grade as G1 from Highschooler H1) using(ID1)
inner join (select ID as ID2, name as N2, grade as G2 from Highschooler H2) using(ID2)
group by N2
having count(N1)>1

